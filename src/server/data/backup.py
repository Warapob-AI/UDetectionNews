import requests
import json
from dotenv import load_dotenv
import os
load_dotenv()
from NewsTitleCheck import NewsCheck

def NewsSearch(task: str): 
    SEARCH_ENGINE_ID = os.getenv('search_engine_id')
    
    api_keys = [
        os.getenv('GOOGLE_SEARCH_API_KEY_1'),
        os.getenv('GOOGLE_SEARCH_API_KEY_2'),
        os.getenv('GOOGLE_SEARCH_API_KEY_3'),
        os.getenv('GOOGLE_SEARCH_API_KEY_4'),
        os.getenv('GOOGLE_SEARCH_API_KEY_5'),
        os.getenv('GOOGLE_SEARCH_API_KEY_6'),
        os.getenv('GOOGLE_SEARCH_API_KEY_7'),
        os.getenv('GOOGLE_SEARCH_API_KEY_8'),
        os.getenv('GOOGLE_SEARCH_API_KEY_9'),
        os.getenv('GOOGLE_SEARCH_API_KEY_10'),
        os.getenv('GOOGLE_SEARCH_API_KEY_11'),
        os.getenv('GOOGLE_SEARCH_API_KEY_12'),
        os.getenv('GOOGLE_SEARCH_API_KEY_13'),
        os.getenv('GOOGLE_SEARCH_API_KEY_14'),
        os.getenv('GOOGLE_SEARCH_API_KEY_15'),
        os.getenv('GOOGLE_SEARCH_API_KEY_16'),
        os.getenv('GOOGLE_SEARCH_API_KEY_17'),
        os.getenv('GOOGLE_SEARCH_API_KEY_18'),
        os.getenv('GOOGLE_SEARCH_API_KEY_19'),
        os.getenv('GOOGLE_SEARCH_API_KEY_20'),
        os.getenv('GOOGLE_SEARCH_API_KEY_21'),
        os.getenv('GOOGLE_SEARCH_API_KEY_22'),
        os.getenv('GOOGLE_SEARCH_API_KEY_23'),
        os.getenv('GOOGLE_SEARCH_API_KEY_24'),
        os.getenv('GOOGLE_SEARCH_API_KEY_25'),
        os.getenv('GOOGLE_SEARCH_API_KEY_26'),
        os.getenv('GOOGLE_SEARCH_API_KEY_27'),
        os.getenv('GOOGLE_SEARCH_API_KEY_28'),
        os.getenv('GOOGLE_SEARCH_API_KEY_29'),
        os.getenv('GOOGLE_SEARCH_API_KEY_30')
    ]
    
    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Key ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô None) ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    valid_api_keys = [key for key in api_keys if key]

    task_with_filter = f"{task} -site:wikipedia.org"
    
    # üîÑ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ API Key ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô
    for i, api_key in enumerate(valid_api_keys):
        print(f"--- Attempting with API Key #{i + 1} ---")
        
        try:
            url = f"https://www.googleapis.com/customsearch/v1?key={api_key}&cx={SEARCH_ENGINE_ID}&q={task_with_filter}"
            
            response = requests.get(url)
            # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (‡πÄ‡∏ä‡πà‡∏ô 429 Quota Exceeded) ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÇ‡∏¢‡∏ô exception
            response.raise_for_status()

            # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
            print(f"API Key #{i + 1} successful!")
            search_results = response.json()
            results_list = []
            
            if "items" in search_results:
                for item in search_results.get("items", []):
                    print(item)
                    title = item.get("title")
                    link = item.get("link")
                    snippet = item.get("snippet")
                    
                    image_url = None
                    if 'pagemap' in item and 'cse_image' in item.get('pagemap', {}) and len(item['pagemap']['cse_image']) > 0:
                        image_url = item['pagemap']['cse_image'][0].get('src')
                    
                    if image_url is None: 
                        continue

                    result_item = {
                        "title": title,
                        "description": snippet,
                        "imageUrl": image_url,
                        "link": link
                    }
                    results_list.append(result_item)
            
            json_output = json.dumps(results_list, indent=4, ensure_ascii=False)
            
            print(json_output)
            # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ return ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            return json_output
            
        except requests.exceptions.HTTPError as err:
            # ‚ùå ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡πÄ‡∏ä‡πà‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏´‡∏°‡∏î) ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
            print(f"API Key #{i + 1} failed: {err}. Trying next key...")
            # Loop ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á Key ‡∏≠‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        
        except Exception as e:
            print(f"An unexpected error occurred with Key #{i + 1}: {e}. Trying next key...")

    # ‡∏ñ‡πâ‡∏≤‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏ô‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏•‡∏¢ (‡∏ó‡∏∏‡∏Å Key ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
    print("All API keys failed.")
    return json.dumps([], indent=4, ensure_ascii=False) # return ‡πÄ‡∏õ‡πá‡∏ô JSON array ‡∏ß‡πà‡∏≤‡∏á

# --- ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ---
task = "‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ì‡∏∞‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà"

search_results = NewsSearch(task)
NewsCheck(task, search_results)