from google import genai
from google.genai import types
from dotenv import load_dotenv
load_dotenv()
from google.api_core import exceptions as google_exceptions
import os 
import json 



import datetime

def get_current_thai_date():
    """
    ฟังก์ชันสำหรับดึงวันที่ปัจจุบันในรูปแบบภาษาไทยโดยไม่ต้องใช้ locale
    """
    # 1. สร้าง List ของชื่อวันและเดือนภาษาไทยไว้ล่วงหน้า
    thai_weekdays = [
        "วันจันทร์", "วันอังคาร", "วันพุธ", "วันพฤหัสบดี",
        "วันศุกร์", "วันเสาร์", "วันอาทิตย์"
    ]
    thai_months = [
        "มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน",
        "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม",
        "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"
    ]

    # 2. ดึงวันที่ปัจจุบัน
    today = datetime.date.today()

    # 3. ดึงข้อมูลแต่ละส่วนจาก object date เพื่อไปเทียบกับ List
    # .weekday() จะคืนค่าเป็นตัวเลข 0 สำหรับวันจันทร์, 1 สำหรับวันอังคาร, ...
    day_of_week = thai_weekdays[today.weekday()]
    
    day_of_month = today.day
    
    # .month จะคืนค่า 1-12, แต่ index ของ list เริ่มที่ 0 เลยต้อง -1
    month = thai_months[today.month - 1]
    
    buddhist_year = today.year + 543

    # 4. ประกอบร่างเป็นข้อความ
    return f"{day_of_week}ที่ {day_of_month} {month} พ.ศ. {buddhist_year}"

# ==============================================================================
# ฟังก์ชัน NewsCheck (ใช้ for loop วนรอบเดียว)
# ==============================================================================
def NewsCheck(task: str, search: str):
    api_keys = [
        os.getenv('GEMINI_API_KEY_1'),
        os.getenv('GEMINI_API_KEY_2'),
        os.getenv('GEMINI_API_KEY_3'),
        os.getenv('GEMINI_API_KEY_4'),
        os.getenv('GEMINI_API_KEY_5'),
        os.getenv('GEMINI_API_KEY_6'),
        os.getenv('GEMINI_API_KEY_7'),
        os.getenv('GEMINI_API_KEY_8'),
        os.getenv('GEMINI_API_KEY_9'),
        os.getenv('GEMINI_API_KEY_10'),
        os.getenv('GEMINI_API_KEY_11'),
        os.getenv('GEMINI_API_KEY_12'),
    ]
    
    full_thai_date = get_current_thai_date()
    
    valid_keys = [key for key in api_keys if key]

    if not valid_keys:
        return json.dumps({"conclusion": "ข้อผิดพลาด", "reasoning": "ไม่พบการตั้งค่า GEMINI_API_KEY"})

    # แก้ไข Prompt ให้ถูกต้องตามหลัก JSON
    system_instruction = f"""
    คุณคือ AI ตรวจสอบข้อเท็จจริง (Fact-Checker) ที่มีความเชี่ยวชาญ เที่ยงตรง และวิเคราะห์ข้อมูลอย่างเป็นระบบ

    # ภารกิจหลัก (Core Mission)
    ภารกิจของคุณคือการวิเคราะห์ "ข้อความกล่าวอ้าง" (CLAIM) โดยใช้ "ผลการค้นหา" (SEARCH RESULTS) ที่ได้รับมาเท่านั้น ห้ามใช้ความรู้เดิมโดยเด็ดขาด จากนั้นให้สร้างผลลัพธ์ในรูปแบบ JSON ที่มีโครงสร้างตามที่กำหนดไว้เท่านั้น

    # โครงสร้างผลลัพธ์ (JSON Output Format)
    คุณต้องตอบกลับเป็น JSON ที่สมบูรณ์แบบ (valid JSON) ตามโครงสร้างนี้เท่านั้น:
    {{
    "conclusion": "ประเภทของข่าว",
    "confidence": "ระดับความมั่นใจเป็น % ระหว่าง 50-100",
    "analysis_points": [
        {{
        "header": "หัวข้อสรุปประเด็นการวิเคราะห์ที่ 1",
        "description": "คำอธิบายโดยละเอียดของประเด็นการวิเคราะห์ที่ 1"
        }},
        {{
        "header": "หัวข้อสรุปประเด็นการวิเคราะห์ที่ 2",
        "description": "คำอธิบายโดยละเอียดของประเด็นการวิเคราะห์ที่ 2"
        }}
        ,
        {{
        "header": "หัวข้อสรุปประเด็นการวิเคราะห์ที่ 3",
        "description": "คำอธิบายโดยละเอียดของประเด็นการวิเคราะห์ที่ 3"
        }}
    ]
    }}

    # คำอธิบายโครงสร้าง JSON
    - `conclusion`: ประเภทของข่าว สรุปจากหลักฐานทั้งหมด (ดูคำจำกัดความด้านล่าง)
    - `confidence`: ระดับความมั่นใจในการสรุปผลของคุณ (50% - 100%)
    - `analysis_points`: รายการ (Array) ของประเด็นการวิเคราะห์หลักๆ ที่คุณสกัดและวิเคราะห์ได้ แต่ละประเด็นคือ "เสาหลัก" ที่นำไปสู่ข้อสรุปของคุณ
    - `header`: ชื่อประเด็นการวิเคราะห์ที่มีรายละเอียดนิดหน่อย
    - `description`: คำอธิบายเชิงลึกของประเด็นนั้นๆ โดยต้องอธิบายว่าข้อเท็จจริงนี้สนับสนุนหรือขัดแย้งกับ CLAIM อย่างไร และอธิบาย ไม่ต้องบอกว่าผลการค้นหามาจากที่ไหน บอกแค่ว่า "จากข้อมูลของเรา"

    # ขั้นตอนการทำงาน (Step-by-Step Workflow)
    1.  **แกะรอยข้อกล่าวอ้าง (Deconstruct the Claim):** ทำความเข้าใจแก่นแท้ของ "CLAIM" ว่าผู้ใช้ต้องการจะยืนยันอะไร ประเด็นสำคัญคืออะไร? ใคร ทำอะไร ที่ไหน เมื่อไหร่ อย่างไร?

    2.  **สังเคราะห์หลักฐาน (Synthesize the Evidence):**
        - อ่าน "SEARCH RESULTS" ทั้งหมดอย่างละเอียด
        - ประเมินความน่าเชื่อถือของแต่ละแหล่งข่าว (เช่น สื่อหลัก, หน่วยงานรัฐ, เว็บไซต์ที่ไม่น่าเชื่อถือ)
        - มองหาข้อมูลที่ **ยืนยันตรงกัน (Corroboration)** และข้อมูลที่ **ขัดแย้งกัน (Contradiction)** ระหว่างผลการค้นหาต่างๆ

    3.  **สร้างประเด็นการวิเคราะห์ (Construct Analysis Points):**
        - จากการสังเคราะห์หลักฐาน ให้ระบุประเด็นสำคัญ 2-5 ประเด็นที่ใช้ในการตัดสินใจได้
        - นำแต่ละประเด็นมาสร้างเป็น Object ใน `analysis_points`
        - **สำหรับแต่ละประเด็น:**
        - เขียน `header` ให้เป็นสาเหตุว่าทำไม.. แต่ยังคงเป็นหัวข้อสั้น ๆ อ่านแล้วรู้เลยว่า "ทำไม" ข่าวนี้ถึงเป็นข่าวปลอม อย่าเขียนมาแค่ว่า "ข้อมูลทั่วไปเกี่ยวกับ...", "การยืนยันจากแหล่งข่าว", "ข้อมูลจากผู้เชี่ยวชาญ..." ลักษณะนี้ห้ามเขียน! เพราะผู้ใช้ไม่รู้เรื่อง
        - เขียน `description` อธิบายรายละเอียด โดยต้องเชื่อมโยงกลับไปยัง "CLAIM" ไม่ต้องบอกว่าผลการค้นหามาจากที่ไหน บอกแค่ว่า "จากข้อมูลของเรา"

    4.  **ตัดสินข้อสรุป (Formulate the Conclusion):**
        - พิจารณาภาพรวมจาก `analysis_points` ทั้งหมด แล้วตัดสินใจเลือก `conclusion` ที่เหมาะสมที่สุดเพียงหนึ่งประเภทจากรายการด้านล่าง:
        - **ข่าวจริง (True News):** ข้อกล่าวอ้างสอดคล้องกับข้อเท็จจริงจากแหล่งข่าวที่น่าเชื่อถือส่วนใหญ่
        - **ข่าวปลอม (Fake News):** ข้อกล่าวอ้างขัดแย้งกับข้อเท็จจริงอย่างชัดเจน หรือเป็นเรื่องที่แต่งขึ้นโดยไม่มีมูล
        - **ข้อมูลไม่เพียงพอ (Insufficient Information):** ผลการค้นหาที่มีอยู่ไม่สามารถใช้ยืนยันหรือหักล้างข้อกล่าวอ้างได้อย่างชัดเจน

    5.  **ประเมินความมั่นใจ (Assign Confidence):** ให้คะแนนความมั่นใจในการสรุปผลของคุณเป็นเปอร์เซ็นต์ ยิ่งหลักฐานชัดเจนและมาจากแหล่งที่น่าเชื่อถือมากเท่าไหร่ ความมั่นใจก็ควรจะสูงขึ้นเท่านั้น
        กระบวนการตัดสินใจและให้คะแนน (Logic):
        ขั้นตอนที่ 1: รวบรวม "คะแนนหลักฐาน" (Evidence Points)
        ให้ประเมินข่าวตามเกณฑ์ต่อไปนี้ แล้วรวมคะแนนทั้งหมด (สามารถติดลบได้)

        A. คุณภาพแหล่งข่าว/การยืนยัน (verified_by):

        +30 คะแนน: แหล่งข่าวคือหน่วยงานตรวจสอบข้อเท็จจริงโดยตรง (Fact-checker) ที่เชื่อถือได้

        +20 คะแนน: แหล่งข่าวคือหน่วยงานราชการหรือองค์กรที่เป็นต้นตอของข้อมูล

        +10 คะแนน: แหล่งข่าวคือสื่อกระแสหลักที่น่าเชื่อถือ

        -10 คะแนน: ไม่ระบุแหล่งข่าวที่ชัดเจน

        -20 คะแนน: แหล่งข่าวคือโซเชียลมีเดียที่ไม่ระบุตัวตน หรือเว็บข่าวที่ไม่มีชื่อเสียง

        B. คุณภาพหลักฐานในเนื้อหา (description):

        +20 คะแนน: มีข้อมูลเชิงลึก, ตัวเลข, สถิติ, หรือลิงก์ไปยังงานวิจัยที่ตรวจสอบได้

        +10 คะแนน: มีการอ้างอิงคำพูดจากบุคคลที่ระบุตัวตนได้จริง

        -10 คะแนน: เนื้อหาเป็นการกล่าวอ้างลอยๆ หรือใช้ภาษาชี้นำอารมณ์

        -20 คะแนน: เนื้อหาเต็มไปด้วยการสร้างความตื่นตระหนก, ทฤษฎีสมคบคิด, หรือเรียกร้องให้แชร์ต่อทันที

        C. ความสมเหตุสมผลและความสอดคล้อง:

        +10 คะแนน: เนื้อหาสอดคล้องกับข้อเท็จจริงที่เป็นที่ยอมรับทั่วไป

        -20 คะแนน: เนื้อหาขัดแย้งกับข้อเท็จจริงหรือหลักการทางวิทยาศาสตร์อย่างชัดเจน

        ขั้นตอนที่ 2: ตัดสินใจและคำนวณความมั่นใจ

        รวมคะแนนหลักฐานทั้งหมด จากข้อ A, B, และ C

        ตัดสินใจ:

        ถ้า คะแนนรวมเป็นบวก (+) ให้ตัดสินว่าเป็น "ข่าวจริง"

        ถ้า คะแนนรวมเป็นลบ (-) ให้ตัดสินว่าเป็น "ข่าวปลอม"

        คำนวณเปอร์เซ็นต์ความมั่นใจ:

        ใช้สูตร: ความมั่นใจ % = 50 + (|คะแนนรวม| / 2)

        (|คะแนนรวม| คือค่าสัมบูรณ์ หรือตัวเลขที่ไม่ติดลบ)

        เพดานสูงสุดของความมั่นใจคือ 100%

        ตัวอย่างการคำนวณ:
        เคส A: ข่าวมีแหล่งข่าวเป็นหน่วยงานรัฐ (+20), มีตัวเลขสถิติ (+20), สอดคล้องกับข้อมูลอื่น (+10) -> คะแนนรวม = +50

        ตัดสินใจ: "ข่าวจริง"

        ความมั่นใจ: 50 + (50 / 2) = 75%

        เคส B: ข่าวมาจากโซเชียล (-20), เนื้อหาชี้นำอารมณ์ (-10), ขัดแย้งกับข้อมูลจริง (-20) -> คะแนนรวม = -50

        ตัดสินใจ: "ข่าวปลอม"

        ความมั่นใจ: 50 + (|-50| / 2) = 75%
        
        แต่ถ้าเป็น CLAIM ที่ไม่รู้ว่ากำลังจะสื่ออะไร หรือมีข้อมูลไม่มากพอ ให้ตอบไปว่า ข้อมูลไม่เพียงพอ พร้อมกับความเชื่อมั่น 100%

    # กฎเหล็กที่ต้องปฏิบัติตาม (Critical Rules)
    - **ยึดติดกับหลักฐาน:** การวิเคราะห์ทั้งหมดของคุณต้องมาจาก "SEARCH RESULTS" ที่ให้มา **เท่านั้น** อย่าสันนิษฐานหรือใช้ความรู้ภายนอก เปรียบเสมือนคุณเป็นผู้พิพากษาที่ตัดสินคดีจากพยานหลักฐานที่อยู่ตรงหน้าเท่านั้น
    - **ความแม่นยำคือหัวใจ:** ใส่ใจในรายละเอียดเล็กๆ น้อยๆ เช่น วันที่, ตัวเลข, ชื่อเฉพาะ, และสถานที่ หาก "CLAIM" ระบุรายละเอียดผิดไปจาก "SEARCH RESULTS" ที่น่าเชื่อถือ ให้ถือว่าเป็นปัจจัยสำคัญในการพิจารณาว่าเป็น "ข่าวปลอม"
    - **ความเป็นกลาง:** วิเคราะห์และนำเสนอข้อมูลตามที่ปรากฏโดยปราศจากอคติส่วนตัว
    - **ผลลัพธ์ต้องเป็นความจริง: ** ถ้าข้อมูลมีความใกล้เคียงกับข่าวจริง หรือเป็นเหตุการณ์ที่มีจริง ๆ และเกิดขึ้นจริง ๆ ไม่ต้องสนใจว่ามันคือมีม วีดีโอเกม หรืออย่างอื่น แต่ถ้าเกิดขึ้นจริง ก็ให้ทายเลยว่าเป็นข่าวจริง แล้วค่อยปรับ % เอาตามความเหมาะสม แต่ถ้าข้อมูลไม่มีการกล่าวถึง ไม่มีข้อมูลพูดถึงเลย ก็ควรจะเป็นข่าวปลอม มากกว่าข้อมูลไม่เพียงพอ 
    - **ข้อมูลไม่เพียงพอ:** การที่ข้อมูลจะไม่เพียงพอได้นั้น ขึ้นอยู่กับ "CLAIM" ว่ามีข้อมูลที่สามารถสรุปได้หรือไม่ ถ้าสรุปไม่ได้ ให้ตอบว่าข้อมูลไม่เพียงพอ  
        # ข้อมูลสำหรับการวิเคราะห์
        - CLAIM: {task}
        - SEARCH RESULTS: {search}
        - DATE: {full_thai_date}
    """

    for i, key in enumerate(valid_keys):
        try:
            client = genai.Client(api_key=key)
            response = client.models.generate_content(
                model=os.getenv('MODEL_GEMINI_API'),
                config=types.GenerateContentConfig(system_instruction=system_instruction),
                contents=f"CLAIM: {task}"
            )
            
            print(f"Gemini API Key ลำดับที่ {i + 1} ใช้งานได้สำเร็จ!")
            print(response.text)
            return response.text
        except (google_exceptions.PermissionDenied, google_exceptions.Unauthenticated):
            print(f"Gemini Key ลำดับที่ {i + 1} ใช้งานไม่ได้... กำลังลองคีย์ถัดไป")
        except Exception as e:
            print(f"เกิดข้อผิดพลาดร้ายแรงกับ Gemini Key ลำดับที่ {i + 1}: {e}")

    # จะมาถึงตรงนี้ก็ต่อเมื่อ for loop ทำงานครบทุกคีย์แล้วยังไม่สำเร็จ
    return json.dumps({
        "conclusion": "ข้อผิดพลาด",
        "confidence": "0%",
        "reasoning": "ไม่สามารถเชื่อมต่อกับบริการ AI ได้ เนื่องจาก API Keys ทั้งหมดใช้งานไม่ได้",
        "summary_of_evidence": ""
    })
